  UnzipToS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: s3permissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: !Join [ '', [ { 'Fn::GetAtt': [ SourceBucket, Arn ] }, '/*' ] ]
          - Effect: Allow
            Action: [ 's3:GetObject', 's3:PutObject', 's3:DeleteObject' ]
            Resource: !Join [ '', [ { 'Fn::GetAtt': [ Bucket, Arn ] }, '/*' ] ]
          - Effect: Allow
            Action: [ 'cloudfront:CreateInvalidation' ]
            Resource: '*'
  UnzipToS3:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt UnzipToS3Role.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import logging
          import traceback
          from time import time

          import zipfile
          from io import BytesIO
          import mimetypes

          mimetypes.init()

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def invalidate_cloudformation(cloudfront_id):
              cloudfront = boto3.client('cloudfront')
              cloudfront.create_invalidation(
                DistributionId = cloudfront_id,
                InvalidationBatch = {
                  'Paths': {
                    'Quantity': 1,
                    'Items': [ '/*' ],
                  },
                  'CallerReference': str(time()).replace(".", "")
                },
              )

          def handler(event, context):
            try:
              LOGGER.info('Event structure: %s', event)

              s3 = boto3.client('s3')                
              s3_resource = boto3.resource('s3')

              zip_file = event['ResourceProperties']['OriginKey']
              zip_bucket = event['ResourceProperties']['OriginBucket']
              unzip_bucket = event['ResourceProperties']['DestinationBucket']
              cloudfront_id = event['ResourceProperties']['DistributionId']

              zip_obj = s3_resource.Object(bucket_name=zip_bucket, key=zip_file)
              buffer = BytesIO(zip_obj.get()["Body"].read())
              z = zipfile.ZipFile(buffer)

              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                for filename in z.namelist():
                    file_info = z.getinfo(filename)
                    if (file_info.is_dir()):
                      continue
                    mime_type = mimetypes.guess_type(filename)
                    args={
                      "Metadata": {
                        "from": f"{zip_file}"
                      }
                    }
                    if (mime_type[0]):
                      args['ContentType'] = mime_type[0]

                    s3_resource.meta.client.upload_fileobj(
                      z.open(filename),
                      Bucket=unzip_bucket,
                      Key=f'{filename}', 
                      ExtraArgs=args,
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{unzip_bucket}/{zip_file}')
              elif event['RequestType'] == 'Delete':
                for filename in z.namelist():
                  file_info = z.getinfo(filename)
                  if (file_info.is_dir()):
                    continue
                  object_in_s3 = s3_resource.Object(bucket_name=unzip_bucket, key=filename)
                  if (object_in_s3.metadata['from'] == zip_file):
                    s3_resource.meta.client.delete_object(
                      Bucket=unzip_bucket,
                      Key=f'{filename}',
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              LOGGER.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              traceback.print_exc()
