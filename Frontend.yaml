AWSTemplateFormatVersion: "2010-09-09"
Description: 'Frontend Stack'
Parameters:
  DomainName:
    Type: String
    Description: Domain under which to host the frontend
  CertificateArn:
    Type: String
    Description: Arn of an ACM certificate that covers the DomainName
  ArtifactBucketName:
    Type: String
    Description: Name of the bucket that contains the fronted zip files
  WebappVersion:
    Type: String
    Description: Version of the frontend to deploy
Outputs:
  WebAppUrl:
    Value: !Join [ "", [ {"Fn::Sub" : "https://"} , { Ref: Bucket }, '/' ] ]
Resources:
#  DNS:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HostedZoneName: 'example.com'
#      Name: !Ref Bucket
#      TTL: "900"
#      Type: CNAME
#      ResourceRecords:
#       - !GetAtt [CDN, DomainName]
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: BucketPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: ReadFromCloudFront
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CDNOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', { Ref: Bucket }, '/*' ]]
      Bucket: { Ref: Bucket }
  CDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref Bucket
        HttpVersion: http2
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt [Bucket, RegionalDomainName] 
          S3OriginConfig:
            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CDNOAI ] ]
        Enabled: 'true'
        Comment: !Join [ "", [ "Distribution for ", { Ref: Bucket } ] ]
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCachingMinTTL: 300
          ErrorCode: 403
          ResponseCode: 404
          ResponsePagePath: /index.html
        DefaultCacheBehavior:
          MaxTTL: 3600
          MinTTL: 30
          DefaultTTL: 1800
          ForwardedValues:
            Cookies:
              Forward: none
          TargetOriginId: S3Origin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
  CDNOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${AWS::StackName}'
  DeployWebapp:
    Type: Custom::DeployWebApp
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt UnzipToS3.Arn
      DistributionId: !Ref CDN
      DestinationBucket: !Ref Bucket
      OriginBucket: !Ref ArtifactBucketName
      OriginKey: !Join [ '', [ 'webapp/webapp_', { Ref: WebappVersion }, '.zip' ] ]
  UnzipToS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: s3permissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: !Join [ '', [ 'arn:aws:s3:::', { Ref: ArtifactBucketName }, '/*' ] ]
          - Effect: Allow
            Action: [ 's3:GetObject', 's3:PutObject', 's3:DeleteObject' ]
            Resource: !Join [ '', [ { 'Fn::GetAtt': [ Bucket, Arn ] }, '/*' ] ]
          - Effect: Allow
            Action: [ 'cloudfront:CreateInvalidation' ]
            Resource: '*'
  UnzipToS3:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt UnzipToS3Role.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import logging
          import traceback
          from time import time

          import zipfile
          from io import BytesIO
          import mimetypes

          mimetypes.init()

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def invalidate_cloudformation(cloudfront_id):
              cloudfront = boto3.client('cloudfront')
              cloudfront.create_invalidation(
                DistributionId = cloudfront_id,
                InvalidationBatch = {
                  'Paths': {
                    'Quantity': 1,
                    'Items': [ '/*' ],
                  },
                  'CallerReference': str(time()).replace(".", "")
                },
              )

          def handler(event, context):
            try:
              LOGGER.info('Event structure: %s', event)

              s3 = boto3.client('s3')                
              s3_resource = boto3.resource('s3')

              zip_file = event['ResourceProperties']['OriginKey']
              zip_bucket = event['ResourceProperties']['OriginBucket']
              unzip_bucket = event['ResourceProperties']['DestinationBucket']
              cloudfront_id = event['ResourceProperties']['DistributionId']

              zip_obj = s3_resource.Object(bucket_name=zip_bucket, key=zip_file)
              buffer = BytesIO(zip_obj.get()["Body"].read())
              z = zipfile.ZipFile(buffer)

              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                for filename in z.namelist():
                    file_info = z.getinfo(filename)
                    if (file_info.is_dir()):
                      continue
                    mime_type = mimetypes.guess_type(filename)
                    args={
                      "Metadata": {
                        "from": f"{zip_file}"
                      }
                    }
                    if (mime_type[0]):
                      args['ContentType'] = mime_type[0]

                    s3_resource.meta.client.upload_fileobj(
                      z.open(filename),
                      Bucket=unzip_bucket,
                      Key=f'{filename}', 
                      ExtraArgs=args,
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{unzip_bucket}/{zip_file}')
              elif event['RequestType'] == 'Delete':
                for filename in z.namelist():
                  file_info = z.getinfo(filename)
                  if (file_info.is_dir()):
                    continue
                  object_in_s3 = s3_resource.Object(bucket_name=unzip_bucket, key=filename)
                  if (object_in_s3.metadata['from'] == zip_file):
                    s3_resource.meta.client.delete_object(
                      Bucket=unzip_bucket,
                      Key=f'{filename}',
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              LOGGER.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              traceback.print_exc()
  UploadToS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: lambdaaddservicerole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: [ 's3:PutObject', 's3:DeleteObject' ]
            Resource: !Join [ '', [ { 'Fn::GetAtt': [ Bucket, Arn ] }, '/*' ] ]
  UploadToS3:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt UploadToS3Role.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import logging
          import traceback

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def handler(event, context):
            try:
              LOGGER.info('Event structure: %s', event)

              dest_bucket = event['ResourceProperties']['DestinationBucket']
              dest_key = event['ResourceProperties']['DestinationKey']

              s3_resource = boto3.resource('s3')
              file = s3_resource.Object(bucket_name=dest_bucket, key=dest_key)
 
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
               
                dest_content = event['ResourceProperties']['Content']
                file.put(
                  Body=dest_content
                )

                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{dest_bucket}/{dest_key}')
              elif event['RequestType'] == 'Delete':
                file.delete()
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              LOGGER.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              traceback.print_exc()
  ConfigureWebapp:
    Type: Custom::UploadToS3
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt UploadToS3.Arn
      DestinationBucket: !Ref Bucket
      DestinationKey: 'config.xml'
      Content: 
        Fn::Sub:
        - |
          <?xml version="1.0" encoding="UTF-8"?>
          <version>
            <uri>${API_ENDPOINT}</uri>
            <name>${NAME}</name>
          </version>
        - API_ENDPOINT: !Ref ApiEndpoint
          NAME: !Ref 'AWS::StackName'
